@page "/produto"
@inject HttpClient http
@inject NavigationManager navigation
@using System.Text.Json

<div>
    <a class="btn btn-success" href="produto/create">Novo Produto</a>
</div>
<br />
<div class="form-inline">
    <label class="sr-only" for="filter-name">Filtro</label>
    <input type="text" class="form-control mb-2 mr-sm-2"
           @bind="nomeFiltro"
           placeholder="Filtrar pela descrição" />
    <button type="button" class="btn btn-primary mr-sm-2 mb-2" @onclick="Filtrar">
        Filtrar
    </button>
    <button type="button" class="btn btn-danger mb-2" @onclick="LimparFiltro">
        Limpar
    </button>
</div>
<br />

@if (produtos == null)
{
    <p><em>Carregando...</em></p>
}
else if (produtos.Count == 0)
{
    <p><em>Não existem produtos cadastrados...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Código</th>
                <th>Descrição</th>
                <th>Preço</th>
                <th>Edita</th>
                <th>Deleta</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var produto in produtos)
            {
                <tr>
                    <td>@produto.Codigo</td>
                    <td>@produto.Descricao</td>
                    <td>@produto.Preco</td>
                    <td><a class="btn btn-primary" href="produto/edit/@produto.ProdutoId">Editar</a> </td>
                    <td><a class="btn btn-danger" @onclick="@(()=> DeletarProduto(produto.ProdutoId))" style=" color : white">Deletar</a> </td>
                </tr>
            }
        </tbody>
    </table>
}

<hr />

<Confirma @ref="confirma" onCancela="CancelaConfirma" onConfirma="DeletaConfirma">
    <div>Deseja realmente excluir este item ?</div>
</Confirma>

<Paginacao QuantidadeTotalPaginas="QuantidadeTotalPaginas" paginaAtual="paginaAtual"
           Raio="2" PaginaSelecionada="PaginaSelecionada">
</Paginacao>

@code {

    List<Produto> produtos { get; set; }
    Confirma confirma;
    int codigoProduto;

    private string nomeFiltro = string.Empty;

    private int QuantidadeTotalPaginas;
    private int paginaAtual = 1;


    protected override async Task OnInitializedAsync()
    {
        await CarregaProdutos();
    }

    async Task CarregaProdutos(int pagina = 1, int quantidadePorPagina = 5)
    {

        var httpResponse =
            await http.GetAsync($"api/produto?pagina={pagina}&quantidadePorPagina={quantidadePorPagina}&descricao={nomeFiltro}");

        if (httpResponse.IsSuccessStatusCode)
        {
            QuantidadeTotalPaginas =
                int.Parse(httpResponse.Headers.GetValues("totalPaginas").FirstOrDefault());

            var responseString = await httpResponse.Content.ReadAsStringAsync();

            produtos = JsonSerializer.Deserialize<List<Produto>>(responseString,
                new JsonSerializerOptions()
                    {
                        PropertyNameCaseInsensitive = true
                    });
        }
    }

    private async Task PaginaSelecionada(int pagina)
    {
        paginaAtual = pagina;
        await CarregaProdutos(pagina);
    }


    void DeletarProduto(int produtoId)
    {
        confirma.Exibir();
        codigoProduto = produtoId;
    }

    void CancelaConfirma()
    {
        confirma.Ocultar();
    }

    async Task DeletaConfirma()
    {
        await http.DeleteAsync($"api/produto/{codigoProduto}");
        confirma.Ocultar();
        await CarregaProdutos();
    }

    private async Task Filtrar()
    {
        paginaAtual = 1;
        await CarregaProdutos();
    }

    private async Task LimparFiltro()
    {
        nomeFiltro = string.Empty;
        paginaAtual = 1;
        await CarregaProdutos();
    }
}